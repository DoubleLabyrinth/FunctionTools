#include "AES256.h"

BYTE AES256Encryption::SBox[256] = {0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
                                    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
                                    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
                                    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
                                    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
                                    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
                                    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
                                    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
                                    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
                                    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
                                    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
                                    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
                                    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
                                    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
                                    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
                                    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16};

UINT32 AES256Encryption::Rcon[11] = {0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36};

BYTE AES256Encryption::Multiply0x02[256] = {0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0E, 0x10, 0x12, 0x14, 0x16, 0x18, 0x1A, 0x1C, 0x1E,
                                            0x20, 0x22, 0x24, 0x26, 0x28, 0x2A, 0x2C, 0x2E, 0x30, 0x32, 0x34, 0x36, 0x38, 0x3A, 0x3C, 0x3E,
                                            0x40, 0x42, 0x44, 0x46, 0x48, 0x4A, 0x4C, 0x4E, 0x50, 0x52, 0x54, 0x56, 0x58, 0x5A, 0x5C, 0x5E,
                                            0x60, 0x62, 0x64, 0x66, 0x68, 0x6A, 0x6C, 0x6E, 0x70, 0x72, 0x74, 0x76, 0x78, 0x7A, 0x7C, 0x7E,
                                            0x80, 0x82, 0x84, 0x86, 0x88, 0x8A, 0x8C, 0x8E, 0x90, 0x92, 0x94, 0x96, 0x98, 0x9A, 0x9C, 0x9E,
                                            0xA0, 0xA2, 0xA4, 0xA6, 0xA8, 0xAA, 0xAC, 0xAE, 0xB0, 0xB2, 0xB4, 0xB6, 0xB8, 0xBA, 0xBC, 0xBE,
                                            0xC0, 0xC2, 0xC4, 0xC6, 0xC8, 0xCA, 0xCC, 0xCE, 0xD0, 0xD2, 0xD4, 0xD6, 0xD8, 0xDA, 0xDC, 0xDE,
                                            0xE0, 0xE2, 0xE4, 0xE6, 0xE8, 0xEA, 0xEC, 0xEE, 0xF0, 0xF2, 0xF4, 0xF6, 0xF8, 0xFA, 0xFC, 0xFE,
                                            0x1B, 0x19, 0x1F, 0x1D, 0x13, 0x11, 0x17, 0x15, 0x0B, 0x09, 0x0F, 0x0D, 0x03, 0x01, 0x07, 0x05,
                                            0x3B, 0x39, 0x3F, 0x3D, 0x33, 0x31, 0x37, 0x35, 0x2B, 0x29, 0x2F, 0x2D, 0x23, 0x21, 0x27, 0x25,
                                            0x5B, 0x59, 0x5F, 0x5D, 0x53, 0x51, 0x57, 0x55, 0x4B, 0x49, 0x4F, 0x4D, 0x43, 0x41, 0x47, 0x45,
                                            0x7B, 0x79, 0x7F, 0x7D, 0x73, 0x71, 0x77, 0x75, 0x6B, 0x69, 0x6F, 0x6D, 0x63, 0x61, 0x67, 0x65,
                                            0x9B, 0x99, 0x9F, 0x9D, 0x93, 0x91, 0x97, 0x95, 0x8B, 0x89, 0x8F, 0x8D, 0x83, 0x81, 0x87, 0x85,
                                            0xBB, 0xB9, 0xBF, 0xBD, 0xB3, 0xB1, 0xB7, 0xB5, 0xAB, 0xA9, 0xAF, 0xAD, 0xA3, 0xA1, 0xA7, 0xA5,
                                            0xDB, 0xD9, 0xDF, 0xDD, 0xD3, 0xD1, 0xD7, 0xD5, 0xCB, 0xC9, 0xCF, 0xCD, 0xC3, 0xC1, 0xC7, 0xC5,
                                            0xFB, 0xF9, 0xFF, 0xFD, 0xF3, 0xF1, 0xF7, 0xF5, 0xEB, 0xE9, 0xEF, 0xED, 0xE3, 0xE1, 0xE7, 0xE5};

BYTE AES256Encryption::Multiply0x03[256] = {0x00, 0x03, 0x06, 0x05, 0x0C, 0x0F, 0x0A, 0x09, 0x18, 0x1B, 0x1E, 0x1D, 0x14, 0x17, 0x12, 0x11,
                                            0x30, 0x33, 0x36, 0x35, 0x3C, 0x3F, 0x3A, 0x39, 0x28, 0x2B, 0x2E, 0x2D, 0x24, 0x27, 0x22, 0x21,
                                            0x60, 0x63, 0x66, 0x65, 0x6C, 0x6F, 0x6A, 0x69, 0x78, 0x7B, 0x7E, 0x7D, 0x74, 0x77, 0x72, 0x71,
                                            0x50, 0x53, 0x56, 0x55, 0x5C, 0x5F, 0x5A, 0x59, 0x48, 0x4B, 0x4E, 0x4D, 0x44, 0x47, 0x42, 0x41,
                                            0xC0, 0xC3, 0xC6, 0xC5, 0xCC, 0xCF, 0xCA, 0xC9, 0xD8, 0xDB, 0xDE, 0xDD, 0xD4, 0xD7, 0xD2, 0xD1,
                                            0xF0, 0xF3, 0xF6, 0xF5, 0xFC, 0xFF, 0xFA, 0xF9, 0xE8, 0xEB, 0xEE, 0xED, 0xE4, 0xE7, 0xE2, 0xE1,
                                            0xA0, 0xA3, 0xA6, 0xA5, 0xAC, 0xAF, 0xAA, 0xA9, 0xB8, 0xBB, 0xBE, 0xBD, 0xB4, 0xB7, 0xB2, 0xB1,
                                            0x90, 0x93, 0x96, 0x95, 0x9C, 0x9F, 0x9A, 0x99, 0x88, 0x8B, 0x8E, 0x8D, 0x84, 0x87, 0x82, 0x81,
                                            0x9B, 0x98, 0x9D, 0x9E, 0x97, 0x94, 0x91, 0x92, 0x83, 0x80, 0x85, 0x86, 0x8F, 0x8C, 0x89, 0x8A,
                                            0xAB, 0xA8, 0xAD, 0xAE, 0xA7, 0xA4, 0xA1, 0xA2, 0xB3, 0xB0, 0xB5, 0xB6, 0xBF, 0xBC, 0xB9, 0xBA,
                                            0xFB, 0xF8, 0xFD, 0xFE, 0xF7, 0xF4, 0xF1, 0xF2, 0xE3, 0xE0, 0xE5, 0xE6, 0xEF, 0xEC, 0xE9, 0xEA,
                                            0xCB, 0xC8, 0xCD, 0xCE, 0xC7, 0xC4, 0xC1, 0xC2, 0xD3, 0xD0, 0xD5, 0xD6, 0xDF, 0xDC, 0xD9, 0xDA,
                                            0x5B, 0x58, 0x5D, 0x5E, 0x57, 0x54, 0x51, 0x52, 0x43, 0x40, 0x45, 0x46, 0x4F, 0x4C, 0x49, 0x4A,
                                            0x6B, 0x68, 0x6D, 0x6E, 0x67, 0x64, 0x61, 0x62, 0x73, 0x70, 0x75, 0x76, 0x7F, 0x7C, 0x79, 0x7A,
                                            0x3B, 0x38, 0x3D, 0x3E, 0x37, 0x34, 0x31, 0x32, 0x23, 0x20, 0x25, 0x26, 0x2F, 0x2C, 0x29, 0x2A,
                                            0x0B, 0x08, 0x0D, 0x0E, 0x07, 0x04, 0x01, 0x02, 0x13, 0x10, 0x15, 0x16, 0x1F, 0x1C, 0x19, 0x1A};

void AES256Encryption::Cipher(BYTE srcBytes[16], UINT32 srcExpandedKey[60]) {
    *((UINT32*)srcBytes) ^= srcExpandedKey[0];
    *((UINT32*)srcBytes + 1) ^= srcExpandedKey[1];
    *((UINT32*)srcBytes + 2) ^= srcExpandedKey[2];
    *((UINT32*)srcBytes + 3) ^= srcExpandedKey[3];

    for(BYTE i = 1; i < 14; i++) {
        for(BYTE j = 0; j < 16; j++) srcBytes[j] = SBox[srcBytes[j]];

        //Shift rows starts;
        //Shift the second row;
        srcBytes[1] ^= srcBytes[5] ^= srcBytes[1] ^= srcBytes[5];
        srcBytes[5] ^= srcBytes[9] ^= srcBytes[5] ^= srcBytes[9];
        srcBytes[9] ^= srcBytes[13] ^= srcBytes[9] ^= srcBytes[13];
        //Shift the third row;
        srcBytes[2] ^= srcBytes[10] ^= srcBytes[2] ^= srcBytes[10];
        srcBytes[6] ^= srcBytes[14] ^= srcBytes[6] ^= srcBytes[14];
        //Shift the fourth row;
        srcBytes[3] ^= srcBytes[15] ^= srcBytes[3] ^= srcBytes[15];
        srcBytes[15] ^= srcBytes[11] ^= srcBytes[15] ^= srcBytes[11];
        srcBytes[11] ^= srcBytes[7] ^= srcBytes[11] ^= srcBytes[7];
        //Shift rows ends;

        for(BYTE j = 0; j < 16; j += 4) {
            BYTE tmp[4];
            *(UINT32*)tmp = *((UINT32*)srcBytes + (j >> 2));
            srcBytes[j] = Multiply0x02[tmp[0]] ^ Multiply0x03[tmp[1]] ^ tmp[2] ^ tmp[3];
            srcBytes[j + 1] = tmp[0] ^ Multiply0x02[tmp[1]] ^ Multiply0x03[tmp[2]] ^ tmp[3];
            srcBytes[j + 2] = tmp[0] ^ tmp[1] ^ Multiply0x02[tmp[2]] ^ Multiply0x03[tmp[3]];
            srcBytes[j + 3] = Multiply0x03[tmp[0]] ^ tmp[1] ^ tmp[2] ^ Multiply0x02[tmp[3]];
        }
        *((UINT32*)srcBytes) ^= srcExpandedKey[i << 2];
        *((UINT32*)srcBytes + 1) ^= srcExpandedKey[(i << 2) + 1];
        *((UINT32*)srcBytes + 2) ^= srcExpandedKey[(i << 2) + 2];
        *((UINT32*)srcBytes + 3) ^= srcExpandedKey[(i << 2) + 3];
    }

    for(BYTE j = 0; j < 16; j++) srcBytes[j] = SBox[srcBytes[j]];
    //Shift rows starts;
    //Shift the second row;
    srcBytes[1] ^= srcBytes[5] ^= srcBytes[1] ^= srcBytes[5];
    srcBytes[5] ^= srcBytes[9] ^= srcBytes[5] ^= srcBytes[9];
    srcBytes[9] ^= srcBytes[13] ^= srcBytes[9] ^= srcBytes[13];
    //Shift the third row;
    srcBytes[2] ^= srcBytes[10] ^= srcBytes[2] ^= srcBytes[10];
    srcBytes[6] ^= srcBytes[14] ^= srcBytes[6] ^= srcBytes[14];
    //Shift the fourth row;
    srcBytes[3] ^= srcBytes[15] ^= srcBytes[3] ^= srcBytes[15];
    srcBytes[15] ^= srcBytes[11] ^= srcBytes[15] ^= srcBytes[11];
    srcBytes[11] ^= srcBytes[7] ^= srcBytes[11] ^= srcBytes[7];
    //Shift rows ends;

    *((UINT32*)srcBytes) ^= srcExpandedKey[56];
    *((UINT32*)srcBytes + 1) ^= srcExpandedKey[57];
    *((UINT32*)srcBytes + 2) ^= srcExpandedKey[58];
    *((UINT32*)srcBytes + 3) ^= srcExpandedKey[59];
}

void AES256Encryption::KeyExpansion(BYTE srcKey[32], UINT32 dstExpandedKey[60]) {
    for(BYTE i = 0; i < 8; i++) dstExpandedKey[i] = *((UINT32*)srcKey + i);
    for(BYTE i = 8; i < 60; i++) {
        UINT32 tmp = dstExpandedKey[i - 1];
        if(i % 8 == 0) {
            tmp = tmp >> 8 | tmp << 24;
            *((BYTE*)&tmp) = SBox[*((BYTE*)&tmp)];
            *((BYTE*)&tmp + 1) = SBox[*((BYTE*)&tmp + 1)];
            *((BYTE*)&tmp + 2) = SBox[*((BYTE*)&tmp + 2)];
            *((BYTE*)&tmp + 3) = SBox[*((BYTE*)&tmp + 3)];
            tmp ^= Rcon[i >> 3];
        }
        if(i % 8 == 4) {
            *((BYTE*)&tmp) = SBox[*((BYTE*)&tmp)];
            *((BYTE*)&tmp + 1) = SBox[*((BYTE*)&tmp + 1)];
            *((BYTE*)&tmp + 2) = SBox[*((BYTE*)&tmp + 2)];
            *((BYTE*)&tmp + 3) = SBox[*((BYTE*)&tmp + 3)];
        }
        dstExpandedKey[i] = dstExpandedKey[i - 8] ^ tmp;
    }
}
